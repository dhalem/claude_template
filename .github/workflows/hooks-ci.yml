name: Hook Development CI
true:
  push:
    branches:
    - main
    - develop
    paths:
    - hooks/**
    - scripts/**
    - pyproject.toml
    - .github/workflows/hooks-ci.yml
  pull_request:
    branches:
    - main
    - develop
    paths:
    - hooks/**
    - scripts/**
    - pyproject.toml
    - .github/workflows/hooks-ci.yml
jobs:
  hook-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install -r requirements-dev.txt

        pip install -r hooks/python/requirements-dev.txt

        '
    - name: Run hook tests
      run: 'cd hooks/python

        python -m pytest tests/ -v --cov=guards --cov=utils --cov-report=xml

        '
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./hooks/python/coverage.xml
        flags: hooks
        name: hooks-coverage
    - name: Test hook integration
      run: 'chmod +x hooks/test-hooks.sh

        ./hooks/test-hooks.sh

        '
  security-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install security tools
      run: 'python -m pip install --upgrade pip

        pip install bandit safety

        '
    - name: Run bandit security scan
      run: 'bandit -r hooks/python/guards hooks/python/utils -f json -o bandit-report.json || true

        bandit -r hooks/python/guards hooks/python/utils

        '
    - name: Run safety check
      run: 'safety check --json --output safety-report.json || true

        safety check

        '
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: 'bandit-report.json

          safety-report.json

          '
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install quality tools
      run: 'python -m pip install --upgrade pip

        pip install black ruff mypy

        '
    - name: Check code formatting
      run: 'black --check hooks/python/ scripts/

        '
    - name: Run ruff linting
      run: 'ruff check hooks/python/ scripts/

        '
    - name: Run type checking
      run: 'mypy hooks/python/guards hooks/python/utils

        '
  performance-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install -r requirements-dev.txt

        pip install -r hooks/python/requirements-dev.txt

        pip install pytest-benchmark

        '
    - name: Run performance benchmarks
      run: 'cd hooks/python

        python -m pytest tests/ -m performance --benchmark-only --benchmark-json=benchmark.json

        '
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: hooks/python/benchmark.json
  hook-compatibility:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Test hook compatibility
      run: '# Test that hooks work with different input formats

        echo ''{"tool": "bash", "command": "ls -la"}'' | hooks/adaptive-guard.sh

        echo ''{"tool": "python", "command": "import os"}'' | hooks/adaptive-guard.sh


        # Test error handling

        echo ''invalid json'' | hooks/adaptive-guard.sh || true

        echo ''{}'' | hooks/adaptive-guard.sh


        # Test Python hooks directly

        cd hooks/python

        python main.py --test-mode

        '
  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check documentation
      run: "# Check that all guards have documentation\nfor guard in hooks/python/guards/*.py; do\n  if [ \"$(basename \"\
        $guard\")\" != \"__init__.py\" ]; then\n    if ! grep -q \"\\\"\\\"\\\"\" \"$guard\"; then\n      echo \"Missing docstring\
        \ in $guard\"\n      exit 1\n    fi\n  fi\ndone\n\n# Check that DEVELOPMENT.md is up to date\nif [ ! -f \"DEVELOPMENT.md\"\
        \ ]; then\n  echo \"Missing DEVELOPMENT.md\"\n  exit 1\nfi\n"
