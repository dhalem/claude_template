[pytest]
testpaths =
    tests
    sonos_server/tests
    syncer/tests
    gemini_playlist_suggester/tests
    monitoring
    indexing/tests

python_files = test_*.py
python_classes = Test*
python_functions = test_*

addopts =
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10

markers =
    # Test types
    unit: Unit tests for individual components (isolated, no external deps)
    integration: Integration tests across components
    functional: Functional tests simulating real usage
    smoke: Smoke tests for basic functionality
    monitoring: Data consistency monitoring tests

    # Execution speed
    fast: Tests that run in under 1 second
    slow: Tests that take a long time to run

    # Component markers
    worker: Worker process tests
    api: API endpoint tests
    database: Database integration tests
    soap: SOAP endpoint tests
    streaming: Audio streaming tests
    spotify: Spotify API integration tests
    sonos: Sonos device integration tests
    metrics: Prometheus metrics tests
    ai: AI/LLM service tests
    volume: Volume control tests
    ui: User interface tests

    # External dependencies
    requires_docker: Tests that need Docker
    requires_musicbot: Tests that need musicbot connection
    requires_audio_deps: Tests requiring audio processing dependencies
    requires_audio_mocking: Tests using comprehensive audio mocking fixtures
    mock_external: Tests that mock all external services

    # Dependency categories for smart test runner
    core_safe: Tests that use only standard library and basic dependencies
    audio_safe: Tests that work with audio dependency mocking
    db_safe: Tests that work with database mocking
    external_safe: Tests that work with external service mocking
    browser_only: Tests that require browser automation

    # Stability markers
    stable: Tests that pass consistently
    flaky: Tests that may fail intermittently
    skip_in_ci: Tests to skip in continuous integration

    # Claude Code specific
    claude_safe: Tests safe to run in Claude Code environment
    claude_skip: Tests to skip in Claude Code environment

# Test discovery patterns
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:librespot
    ignore::UserWarning:spotipy

# Configure asyncio for pytest-asyncio
asyncio_mode = auto
