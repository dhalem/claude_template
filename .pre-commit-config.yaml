repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.5.0
  hooks:
  - id: trailing-whitespace
  - id: end-of-file-fixer
  - id: check-yaml
    args:
    - --unsafe
  - id: check-added-large-files
    args:
    - --maxkb=1000
  - id: check-case-conflict
  - id: check-merge-conflict
  - id: check-json
  - id: check-toml
  - id: check-xml
  - id: debug-statements
  - id: detect-private-key
  - id: mixed-line-ending
    args:
    - --fix=lf
  - id: no-commit-to-branch
    args:
    - --branch
    - production
- repo: https://github.com/adrienverge/yamllint
  rev: v1.35.1
  hooks:
  - id: yamllint
    args:
    - -c=.yamllint.yaml
    verbose: true
- repo: https://github.com/pycqa/flake8
  rev: 7.0.0
  hooks:
  - id: flake8
    args:
    - --config=.flake8
    exclude: ^(archive/)
    additional_dependencies:
    - flake8-docstrings
    verbose: true
- repo: https://github.com/PyCQA/bandit
  rev: 1.8.0
  hooks:
  - id: bandit
    args:
    - -c
    - pyproject.toml
    - -ll
    exclude: ^archive/
    verbose: true
- repo: https://github.com/pre-commit/pygrep-hooks
  rev: v1.10.0
  hooks:
  - id: python-check-blanket-type-ignore
  - id: python-check-blanket-noqa
    verbose: true
- repo: local
  hooks:
  - id: mypy-warning
    name: MyPy Type Checking (Warning Mode)
    entry: bash -c 'mypy --config-file=pyproject.toml --no-error-summary . || true'
    language: system
    types:
    - python
    fail_fast: false
    verbose: true
    pass_filenames: false
- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.10.0.1
  hooks:
  - id: shellcheck
    args:
    - --severity=warning
    - --exclude=SC1091,SC2317,SC2164
    exclude: ^archive/
    verbose: true
- repo: https://github.com/Yelp/detect-secrets
  rev: v1.4.0
  hooks:
  - id: detect-secrets
    args:
    - --baseline
    - .secrets.baseline
    exclude: ^(.*\.lock|package-lock\.json|.*\.min\.js|\.cache|archive/.*)$
    verbose: true
    stages:
    - manual
- repo: local
  hooks:
  - id: no-print-statements
    name: Check for print statements
    entry: ^\s*print\(
    language: pygrep
    types:
    - python
    exclude: ^(scripts/|tools/|debug|tests/|.*test.*\.py|setup\.py|hooks/|indexing/|reviewer/)
    verbose: true
- repo: local
  hooks:
  - id: no-breakpoints
    name: Check for debugging breakpoints
    entry: (breakpoint\(\)|import pdb|pdb\.set_trace|import ipdb|ipdb\.set_trace)
    language: pygrep
    types:
    - python
    verbose: true
- repo: local
  hooks:
  - id: check-eval-usage
    name: Check for eval() usage
    entry: \beval\s*\(
    language: pygrep
    types:
    - python
    verbose: true
  - id: check-exec-usage
    name: Check for exec() usage
    entry: \bexec\s*\(
    language: pygrep
    types:
    - python
    exclude: ^(tests/|migrations/)
    verbose: true
  - id: no-assert-statements
    name: Check for assert statements in production
    entry: \bassert\s+
    language: pygrep
    types:
    - python
    exclude: (tests/|test_|_test\.py$|\.test\.py$|/test_.*\.py$)
    verbose: true
- repo: local
  hooks:
  - id: no-hardcoded-passwords
    name: Check for hardcoded passwords
    entry: (password|passwd|pwd|secret|token|api_key)\s*=\s*["'][^"']+["']
    language: pygrep
    types:
    - python
    exclude: ^(tests/|.*test.*\.py|.*example.*|.*template.*)
    verbose: true
- repo: local
  hooks:
  - id: check-sql-string-formatting
    name: Check for SQL injection risks
    entry: (SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER).*(%s|\.format|f"|f')
    language: pygrep
    types:
    - python
    exclude: ^(migrations/|tests/|.*test.*\.py)
    verbose: true
- repo: local
  hooks:
  - id: check-executables-have-shebangs
    name: Executables have shebangs
    entry: 'bash -c ''for f in "$@"; do if [[ -x "$f" && ! -d "$f" ]]; then head -1 "$f" | grep -q "^#!" || (echo "ERROR:
      Executable $f missing shebang" && exit 1); fi; done'' bash'
    language: system
    files: .*
    verbose: true
  - id: check-shebang-scripts-are-executable
    name: Scripts with shebangs are executable
    entry: 'bash -c ''for f in "$@"; do if head -1 "$f" 2>/dev/null | grep -q "^#!"; then [[ -x "$f" ]] || (echo "ERROR: Script
      $f has shebang but not executable" && exit 1); fi; done'' bash'
    language: system
    types:
    - text
    verbose: true
  - id: check-merge-conflict-markers
    name: Check for merge conflict markers
    entry: (^<<<<<<<|^=======|^>>>>>>>)
    language: pygrep
    types:
    - text
    exclude: ^(\.pre-commit-config\.yaml)$
    verbose: true
  - id: check-empty-files
    name: Check for empty files
    entry: 'bash -c ''for f in "$@"; do if [[ -f "$f" && ! -s "$f" ]]; then echo "ERROR: Empty file $f" && exit 1; fi; done''
      bash'
    language: system
    types:
    - text
    exclude: ^(__init__\.py|\.gitkeep|\.keep)$
    verbose: true
- repo: local
  hooks:
  - id: python-hooks-tests
    name: Python Hooks Test Suite
    entry: bash -c 'cd hooks/python && python3 -m pytest -v'
    language: system
    files: ^hooks/python/.*\.py$
    pass_filenames: false
    verbose: true
- repo: local
  hooks:
  - id: project-tests
    name: Project Test Suite
    entry: bash -c 'timeout 60s ./run_tests.sh || echo "Tests timed out or failed - non-blocking for commits"'
    language: system
    types:
    - python
    pass_filenames: false
    verbose: true
- repo: https://github.com/compilerla/conventional-pre-commit
  rev: v3.0.0
  hooks:
  - id: conventional-pre-commit
    stages:
    - commit-msg
    args: []
default_language_version:
  python: python3
exclude: "(?x)^(\n  \\.git/|\n  \\.venv/|\n  venv/|\n  __pycache__/|\n  build/|\n  dist/|\n  .*\\.egg-info/|\n  temp/|\n \
  \ archive/|\n  node_modules/|\n  .*\\.min\\.js|\n  .*\\.min\\.css|\n  .*\\.jpg|\n  .*\\.jpeg\n)$\n"
