#!/usr/bin/env python3
# RULE #0: MANDATORY FIRST ACTION FOR EVERY REQUEST
# 1. Read CLAUDE.md COMPLETELY before responding
# 2. Setup Python venv: [ -d "venv" ] || ./setup-venv.sh && source venv/bin/activate
# 3. Search for rules related to the request
# 4. Only proceed after confirming no violations
# Failure to follow Rule #0 has caused real harm. Check BEFORE acting, not AFTER making mistakes.
#
# GUARDS ARE SAFETY EQUIPMENT - WHEN THEY FIRE, FIX THE PROBLEM THEY FOUND
# NEVER weaken, disable, or bypass guards - they prevent real harm

"""MCP server for code review using FastMCP."""

import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Optional

from mcp.server.fastmcp import FastMCP

# Add src to path for imports
current_dir = os.path.dirname(os.path.abspath(__file__))
for src_path in [
    os.path.join(current_dir, "src"),
    os.path.join(current_dir, "..", "src")
]:
    if os.path.exists(src_path):
        sys.path.insert(0, src_path)
        break

from file_collector import FileCollector
from gemini_client import GeminiClient
from review_formatter import ReviewFormatter

# Set up logging
LOG_DIR = Path.home() / ".claude" / "mcp" / "code-review" / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOG_DIR / f"server_{datetime.now().strftime('%Y%m%d')}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(sys.stderr)
    ]
)

logger = logging.getLogger(__name__)

# Initialize FastMCP server
mcp = FastMCP("code-review", version="1.0.0")

# Initialize components
file_collector = FileCollector()
review_formatter = ReviewFormatter()
default_model = "gemini-2.0-pro-exp"

logger.info("Code Review MCP Server (FastMCP) starting")

@mcp.tool()
def review_code(
    directory: str,
    focus_areas: Optional[List[str]] = None,
    model: str = default_model,
    max_file_size: int = 1048576
) -> str:
    """Perform a comprehensive code review of a directory using Gemini AI.

    Args:
        directory: Absolute path to the directory to review
        focus_areas: Optional list of specific areas to focus on (e.g., 'security', 'performance')
        model: Gemini model to use (default: gemini-2.0-pro-exp)
        max_file_size: Maximum file size in bytes (default: 1048576)

    Returns:
        A comprehensive code review report
    """
    try:
        directory_path = Path(directory)
        if not directory_path.exists():
            return f"Error: Directory '{directory}' does not exist"

        if not directory_path.is_dir():
            return f"Error: '{directory}' is not a directory"

        logger.info(f"Starting code review for: {directory}")

        # Set file size limit
        file_collector.max_file_size = max_file_size

        # Collect files
        files = file_collector.collect_files(str(directory_path))

        if not files:
            return "No files found to review"

        # Generate file tree
        file_tree = file_collector.get_file_tree()

        # Format review request
        claude_md_path = directory_path / "CLAUDE.md"
        claude_md_path = str(claude_md_path) if claude_md_path.exists() else None

        review_prompt = review_formatter.format_review_request(
            files=files,
            file_tree=file_tree,
            focus_areas=focus_areas or [],
            claude_md_path=claude_md_path
        )

        # Initialize Gemini client
        gemini_client = GeminiClient(model=model)

        # Get review from Gemini
        logger.info(f"Sending review request to Gemini ({model})")
        review_text = gemini_client.review_code(review_prompt)

        # Get usage and collection statistics
        usage = gemini_client.get_usage_summary()
        collection_summary = file_collector.get_summary()

        # Format final response
        response = f"""# Code Review Report

## Summary
- **Directory**: {directory}
- **Model**: {model}
- **Files Reviewed**: {collection_summary['files_collected']}
- **Total Size**: {collection_summary['total_size']:,} bytes
- **Focus Areas**: {', '.join(focus_areas) if focus_areas else 'General review'}

## Usage Statistics
- **Total Tokens**: {usage['total_tokens']:,}
- **Input Tokens**: {usage['input_tokens']:,}
- **Output Tokens**: {usage['output_tokens']:,}
- **Estimated Cost**: ${usage['estimated_cost']:.6f}

---

{review_text}

---

*Generated by Code Review MCP Server using {model}*
"""

        logger.info(f"Review completed. Files: {collection_summary['files_collected']}, "
                    f"Tokens: {usage['total_tokens']}, Cost: ${usage['estimated_cost']:.6f}")

        return response

    except Exception as e:
        logger.error(f"Error in review_code: {e}")
        return f"Error: {str(e)}"


if __name__ == "__main__":
    # Run the FastMCP server
    mcp.run()
