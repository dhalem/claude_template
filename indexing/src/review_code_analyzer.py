# RULE #0: MANDATORY FIRST ACTION FOR EVERY REQUEST
# 1. Read CLAUDE.md COMPLETELY before responding
# 2. Setup Python venv: [ -d "venv" ] || ./setup-venv.sh && source venv/bin/activate
# 3. Search for rules related to the request
# 4. Only proceed after confirming no violations
# Failure to follow Rule #0 has caused real harm. Check BEFORE acting, not AFTER making mistakes.
#
# GUARDS ARE SAFETY EQUIPMENT - WHEN THEY FIRE, FIX THE PROBLEM THEY FOUND
# NEVER weaken, disable, or bypass guards - they prevent real harm

"""Review code analyzer using shared BaseCodeAnalyzer foundation.

This module implements the review_code tool using the shared component
architecture, demonstrating the code reuse and consistency benefits
of the BaseCodeAnalyzer pattern.
"""

import logging
from typing import Dict, List, Optional, Tuple

from base_code_analyzer import AnalysisResult, BaseCodeAnalyzer
from review_formatter import ReviewFormatter

logger = logging.getLogger(__name__)


class ReviewCodeAnalyzer(BaseCodeAnalyzer):
    """Code review analyzer that provides comprehensive code review functionality.

    This analyzer focuses on code quality, best practices, architecture,
    and overall maintainability assessment.
    """

    def __init__(self, default_model: str = "gemini-2.5-pro", usage_tracker=None):
        """Initialize the review code analyzer with centralized usage tracking.

        Args:
            default_model: Default Gemini model to use for reviews
            usage_tracker: Optional centralized usage tracker for multi-tool monitoring
        """
        super().__init__(default_model, usage_tracker)
        self.review_formatter = ReviewFormatter()

    def get_tool_info(self) -> Tuple[str, str, Dict]:
        """Get tool-specific information for review_code.

        Returns:
            Tuple of (tool_name, description, additional_schema)
        """
        tool_name = "review_code"
        description = "Perform a comprehensive code review of a directory using Gemini AI"

        # No additional schema properties needed for review_code
        # All parameters are handled by the base class
        additional_schema = {}

        return tool_name, description, additional_schema

    def format_analysis_prompt(
        self, files: Dict[str, str], file_tree: str, focus_areas: List[str], claude_md_path: Optional[str], **kwargs
    ) -> str:
        """Format the code review prompt for Gemini.

        Args:
            files: Dictionary of file paths to contents
            file_tree: String representation of file structure
            focus_areas: Optional specific areas to focus on
            claude_md_path: Optional path to CLAUDE.md file
            **kwargs: Additional tool-specific parameters (unused for review_code)

        Returns:
            Formatted review prompt string for Gemini
        """
        # Review code doesn't use additional parameters, but accepts kwargs for consistency
        return self.review_formatter.format_review_request(
            files=files, file_tree=file_tree, focus_areas=focus_areas, claude_md_path=claude_md_path
        )

    def format_analysis_response(self, result: AnalysisResult) -> str:
        """Format the final code review response.

        Args:
            result: AnalysisResult containing review content and metadata

        Returns:
            Formatted response string for the user
        """
        # Create comprehensive review report with metadata
        response = f"""# Code Review Report

## Summary
- **Directory**: {result.directory}
- **Model**: {result.model}
- **Files Reviewed**: {result.collection_stats['files_collected']}
- **Total Size**: {result.collection_stats['total_size']:,} bytes
- **Focus Areas**: {', '.join(result.focus_areas) if result.focus_areas else 'General review'}

## Usage Statistics
- **Total Tokens**: {result.usage_stats['total_tokens']:,}
- **Input Tokens**: {result.usage_stats['input_tokens']:,}
- **Output Tokens**: {result.usage_stats['output_tokens']:,}
- **Estimated Cost**: ${result.usage_stats['estimated_cost']:.6f}

---

{result.content}

---

*Generated by Code Review MCP Server using {result.model}*
"""

        return response
