#!/bin/bash

# --------------------------------------------------------------------------
# CLAUDE CODE SAFETY HOOKS INSTALLER
# --------------------------------------------------------------------------
#
# This script installs the comprehensive safety hook system for Claude Code.
# It enforces critical rules from CLAUDE.md to prevent costly mistakes.
#
# WHAT THIS INSTALLS:
# - ~/.claude/comprehensive-guard.sh (main safety guard script)
# - ~/.claude/settings.json (hook configuration)
# - Backup of existing settings (if any)
#
# USAGE:
#   cd hooks
#   ./install-hooks.sh
#
# --------------------------------------------------------------------------

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo -e "${BLUE}--------------------------------------------------------------------------${NC}"
echo -e "${BLUE}Claude Code Safety Hooks Installation${NC}"
echo -e "${BLUE}--------------------------------------------------------------------------${NC}"
echo ""

# Validate prerequisites
echo -e "${YELLOW}Checking prerequisites...${NC}"

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}ERROR: jq is required but not installed.${NC}"
    echo ""
    echo "Install jq:"
    echo "  Ubuntu/Debian: sudo apt-get install jq"
    echo "  macOS: brew install jq"
    echo "  RHEL/CentOS: sudo yum install jq"
    echo ""
    exit 1
fi

# Check if source files exist
REQUIRED_FILES=("comprehensive-guard.sh" "settings.json" "HOOKS.md")
for file in "${REQUIRED_FILES[@]}"; do
    if [[ ! -f "$SCRIPT_DIR/$file" ]]; then
        echo -e "${RED}ERROR: Required file missing: $file${NC}"
        echo "Ensure you're running this script from the hooks directory with all files present."
        exit 1
    fi
done

echo -e "${GREEN}✓ Prerequisites validated${NC}"
echo ""

# Create Claude config directory if it doesn't exist
CLAUDE_DIR="$HOME/.claude"
echo -e "${YELLOW}Setting up Claude configuration directory...${NC}"

if [[ ! -d "$CLAUDE_DIR" ]]; then
    mkdir -p "$CLAUDE_DIR"
    echo -e "${GREEN}✓ Created $CLAUDE_DIR${NC}"
else
    echo -e "${GREEN}✓ $CLAUDE_DIR already exists${NC}"
fi

# Backup existing settings if they exist
if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
    BACKUP_FILE="$CLAUDE_DIR/settings.json.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$CLAUDE_DIR/settings.json" "$BACKUP_FILE"
    echo -e "${GREEN}✓ Backed up existing settings to: $BACKUP_FILE${NC}"
fi

# Function to install a hook file with backup
install_hook() {
    local filename="$1"
    local source_file="$SCRIPT_DIR/$filename"
    local dest_file="$CLAUDE_DIR/$filename"

    if [[ ! -f "$source_file" ]]; then
        echo -e "${YELLOW}⚠️  Skipping $filename (not found in source)${NC}"
        return
    fi

    if [[ -f "$dest_file" ]]; then
        BACKUP_FILE="$dest_file.backup.$(date +%Y%m%d_%H%M%S)"
        mv "$dest_file" "$BACKUP_FILE"
        echo -e "${GREEN}✓ Backed up existing $filename to: $BACKUP_FILE${NC}"
    fi

    cp "$source_file" "$dest_file"
    chmod +x "$dest_file"
    echo -e "${GREEN}✓ Installed: $dest_file${NC}"
}

# Install all hook scripts
echo -e "${YELLOW}Installing safety hook scripts...${NC}"
install_hook "comprehensive-guard.sh"
install_hook "adaptive-guard.sh"
install_hook "lint-guard.sh"
install_hook "claude-output-guard.sh"
install_hook "stderr-output-guard.sh"

# Install settings.json
echo -e "${YELLOW}Installing hook configuration...${NC}"
# Settings.json backup already handled above, just copy the new one
cp "$SCRIPT_DIR/settings.json" "$CLAUDE_DIR/"
echo -e "${GREEN}✓ Installed: $CLAUDE_DIR/settings.json${NC}"

# Validate JSON configuration
echo -e "${YELLOW}Validating configuration...${NC}"
if jq empty "$CLAUDE_DIR/settings.json" 2>/dev/null; then
    echo -e "${GREEN}✓ JSON configuration is valid${NC}"
else
    echo -e "${RED}ERROR: Invalid JSON in settings.json${NC}"
    exit 1
fi

# Validate script syntax for all installed scripts
echo -e "${YELLOW}Validating script syntax...${NC}"
SCRIPTS_VALID=true
for script in "$CLAUDE_DIR"/*.sh; do
    if [[ -f "$script" ]]; then
        if bash -n "$script" 2>/dev/null; then
            echo -e "${GREEN}✓ $(basename "$script") syntax is valid${NC}"
        else
            echo -e "${RED}ERROR: Syntax error in $(basename "$script")${NC}"
            SCRIPTS_VALID=false
        fi
    fi
done

if [[ "$SCRIPTS_VALID" == "false" ]]; then
    echo -e "${RED}ERROR: One or more scripts have syntax errors${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}--------------------------------------------------------------------------${NC}"
echo -e "${GREEN}Installation Complete!${NC}"
echo -e "${BLUE}--------------------------------------------------------------------------${NC}"
echo ""

# Show what was installed
echo -e "${YELLOW}Installed Files:${NC}"
echo "  📜 $CLAUDE_DIR/comprehensive-guard.sh ($(wc -l < "$CLAUDE_DIR/comprehensive-guard.sh") lines)"
echo "  ⚙️  $CLAUDE_DIR/settings.json ($(jq '.hooks | length' "$CLAUDE_DIR/settings.json") hook configurations)"
echo ""

# Show installed guards
echo -e "${YELLOW}Active Safety Guards:${NC}"
jq -r '._documentation.guards_implemented[]' "$CLAUDE_DIR/settings.json" | while IFS= read -r guard; do
    echo "  🛡️  $guard"
done
echo ""

# Show next steps
echo -e "${YELLOW}Next Steps:${NC}"
echo "  1. ✅ Hooks are now active and will trigger automatically"
echo "  2. 🧪 Test the installation: cd $(basename "$SCRIPT_DIR") && ./test-hooks.sh"
echo "  3. 📖 Read the documentation: cat $(basename "$SCRIPT_DIR")/HOOKS.md"
echo "  4. 🔧 Customize if needed by editing the guard script"
echo ""

# Show verification commands
echo -e "${YELLOW}Verification Commands:${NC}"
echo "  Check installation: ls -la $CLAUDE_DIR/"
echo "  Test JSON config:   jq . $CLAUDE_DIR/settings.json"
echo "  Test script syntax: bash -n $CLAUDE_DIR/comprehensive-guard.sh"
echo ""

echo -e "${GREEN}The Claude Code safety hook system is now protecting your workflow!${NC}"
echo ""

# Show warning about what hooks will do
echo -e "${YELLOW}⚠️  IMPORTANT: These hooks will now actively prevent dangerous operations:${NC}"
echo "  • git commit --no-verify (requires permission)"
echo "  • docker restart commands (suggests proper rebuild)"
echo "  • Location-dependent commands without pwd verification"
echo "  • Completion claims without test suite execution"
echo "  • Creation of mock/simulation code (requires permission)"
echo "  • Modification of .pre-commit-config.yaml (requires permission)"
echo ""
echo -e "${BLUE}These protections exist because these mistakes have caused real harm in the past.${NC}"
echo -e "${BLUE}When a hook blocks an action, it's protecting you from repeating documented mistakes.${NC}"
echo ""

# Show backup management info
echo -e "${YELLOW}Backup Management:${NC}"
BACKUP_COUNT=$(find "$CLAUDE_DIR" -name "*.backup.*" 2>/dev/null | wc -l)
if [[ $BACKUP_COUNT -gt 0 ]]; then
    echo "  📦 Found $BACKUP_COUNT backup file(s) in $CLAUDE_DIR"
    echo "  To list backups: ls -la $CLAUDE_DIR/*.backup.*"
    echo "  To clean old backups: find $CLAUDE_DIR -name '*.backup.*' -mtime +7 -delete"
else
    echo "  📦 No backup files found"
fi
echo ""

exit 0
