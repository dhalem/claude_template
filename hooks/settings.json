{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/adaptive-guard.sh"
          }
        ]
      },
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      },
      {
        "matcher": "MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      },
      {
        "matcher": "MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "/home/dhalem/.claude/lint-guard.sh"
          }
        ]
      }
    ]
  },
  "_documentation": {
    "purpose": "Claude Code safety hooks enforcing critical rules from CLAUDE.md",
    "guards_implemented": [
      "Git No-Verify Prevention - Prevents bypassing pre-commit hooks",
      "Docker Restart Prevention - Stops catastrophic restart after code changes",
      "Pre-Commit Skip Prevention - Stops SKIP= environment variable bypasses",
      "Hook Installation Protection - Blocks direct edits to ~/.claude/",
      "Docker Without Compose Prevention - Enforces docker-compose usage",
      "Git Force Push Prevention - Blocks dangerous force pushes",
      "PostToolUse Auto-Linting - Auto-fixes code style after edits"
    ],
    "hook_system": {
      "interactive_mode": "Prompts user for permission when TTY is available",
      "non_interactive_mode": "Uses safety-first blocking policy by default",
      "output_format": "Messages go to stdout and appear in Claude Code interface",
      "rule_failure_messages": "Clear 'RULE FAILURE' indicators for blocked operations"
    },
    "adding_new_guards": {
      "step_1": "Edit /home/dhalem/.claude/adaptive-guard.sh",
      "step_2": "Add new guard section with clear header comments",
      "step_3": "Follow pattern: detect -> message -> get_user_permission -> exit",
      "step_4": "Test both interactive and non-interactive modes",
      "step_5": "Update documentation in script header and this JSON file"
    },
    "maintenance": {
      "script_location": "/home/dhalem/.claude/adaptive-guard.sh",
      "config_location": "/home/dhalem/.claude/settings.json",
      "test_command": "Test hooks by attempting actions they should block",
      "synchronization": "Always update both repository and installation files together"
    },
    "version_requirements": {
      "claude_code": "v1.0.40 or higher (hooks not available in v1.0.24)",
      "dependencies": ["bash", "jq"],
      "restart_required": "Restart Claude Code after hook installation/updates"
    }
  }
}
